---
# tasks file for el_compile_install_python3_from_web

  - name: Update all packages to their latest version and update apt cache
    apt:
      name: "*"
      state: latest
      update_cache: yes
    become: True

  - name: install some system deb package before install python3
    apt:
      pkg:
        - build-essential
        - libncurses5-dev
        - libgdbm-dev
        - libnss3-dev
        - libssl-dev
        - libreadline-dev
        - libffi-dev
        - zlib1g-dev
    become: True
    ignore_errors: yes

  - name: Create a directory /usr/local if it does not exist
    ansible.builtin.file:
      path: /usr/local
      state: directory
      mode: '0755'
    become: True

  - name: Unarchive Python.tgz that needs to be downloaded from python.org, remove existed old directory
    ansible.builtin.unarchive:
      src: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz"
      dest: /usr/local/
      remote_src: yes
    become: True

  - name: try Recursively removing old python3 directory
    ansible.builtin.file:
      path: /usr/local/python3
      state: absent
    become: True

  - name: compile to python3 and  make install
    shell: "cd /usr/local/Python-{{ python_version }};sudo ./configure prefix=/usr/local/python3;make clean && make && make install"
    become: True

#  - name: make install
#    shell: "make clean && make && make install"
#    become: True

  - name: Create a symbolic link
    ansible.builtin.file:
      src: "/usr/local/python3/bin/python{{ python_major_version }}"
      dest: "/usr/bin/python3"
      state: link
    become: True

  - name: Create a symbolic link
    ansible.builtin.file:
      src: "/usr/local/python3/bin/pip3"
      dest: "/usr/bin/pip3"
      state: link
    become: True

  - name: show current Python version
    shell: "/usr/bin/python3 -V"
    register: py3V
  - debug: msg="your server python3 version is {{ py3V.stdout }}"
